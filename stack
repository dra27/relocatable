#!/usr/bin/env bash

state_file="$(dirname $0)/.stack-state"
dir="$(dirname $0)/ocaml"

if [[ ! -d $dir ]]; then
  echo "Expect OCaml clone in $dir" >&2
  exit 1
fi

cd "$dir"

if ! git rev-parse --verify upstream/trunk &> /dev/null; then
  echo 'Could not find upstream/trunk' >&2
  exit 1
fi

BRANCHES=()
TARGETS=()
COMMANDS=()

# Back-ports
#  - Ensure that configure can be patched (#9847; 4.12.0)
#  - Compatibility with -fno-common (#9180; 4.09.1)
#  - Original long shebang "fix" (#8622; 4.10.0)
#  - Hardening of -use-runtime for spaces and symbols (#11112; 5.0.0)
BRANCHES=(no-configure@4.11 fcommon@4.08 shebang@4.09 use-runtime-evil@4.14 use-runtime-evil-fixup@fixup)

# Branches
#  - camlheader_ur
BRANCHES+=(camlheader_ur)

TARGETS=(5.0.0-alpha1 4.14.0 4.13.1 4.12.1 4.11.2 4.10.2 4.09.1 4.08.1)

# Check the branches all exist and collect the commits to stack
for branch in "${BRANCHES[@]}"; do
  branch="${branch%@*}"
  if ! git rev-parse --verify $branch &> /dev/null; then
    if ! git rev-parse --verify origin/$branch &> /dev/null; then
      echo "Both $branch and origin/$branch do not exist!" >&2
      exit 1
    else
      git branch --track $branch origin/$branch
    fi
  fi
done

fault=0
for root in "${TARGETS[@]}"; do
  if ! git rev-parse --verify $root &> /dev/null; then
    echo "Target $root not found" >&2
    fault=1
  fi
done
if ((fault)); then
  exit 1
fi

COMMITS=()
WORKING=()
if [[ ! -e $state_file ]]; then
  if [[ -n "$(git status --porcelain)" ]]; then
    echo 'The working tree is not clean' >&2
    exit 1
  fi

  git clean -dfX &> /dev/null

  # Calculate the menu. First, determine the initial commit list from the
  # branches.
  for branch in "${BRANCHES[@]}"; do
    upstream="${branch#*@}"
    if [[ $upstream = $branch ]]; then
      upstream='trunk'
    fi
    branch="${branch%@*}"
    if [[ $upstream = 'fixup' ]]; then
      commit="$(git log --format=%h -n 1 "$branch")"
      COMMITS+=("fixup $commit")
    else
      while read -r entry; do
        commit="${entry%% *}"
        if [[ ${entry#* } = 'Bootstrap' ]]; then
          # XXX COMBAK Must check that the commit only changes boot/ocamlc and/or boot/ocamllex
          COMMITS+=("bootstrap $commit")
        else
          COMMITS+=("pick $commit")
        fi
      done < <(git log upstream/$upstream..$branch --format="%h %s" --reverse)
    fi
  done

  # Now generate commands for each target branch
  for root in "${TARGETS[@]}"; do
    COMMANDS+=("branch $root")
  done
else
  if [[ -n "$(git ls-files --exclude-standard --others)" ]]; then
    echo 'Untracked files in the working directory' >&2
    exit 1
  elif [[ -n "$(git diff --stat)" ]]; then
    echo 'Unstaged changes in the working directory' >&2
    exit 1
  fi

  # Load the stack state
  phase=0
  while read -r line; do
    case ${line%% *} in
      pick|bootstrap|fixup)
        if ((phase)); then
          WORKING+=("$line")
        else
          COMMITS+=("$line")
        fi;;
      commit)
        COMMANDS+=("$line")
        phase=1;;
      branch)
        COMMANDS+=("$line");;
      target)
        target="${line#* }";;
      *)
        echo "Unrecognised command: $line" >&2
        phase=2;;
    esac
  done < <(cat "$state_file")
  if [[ $phase -gt 1 ]]; then
    exit 1
  fi
  rm "$state_file"
fi

function abort
{
  echo "Branch: $branch for $target"
  echo "  $action"
  for commit in "${COMMITS[@]}"; do
    echo "$commit"
  done > "$state_file"
  echo "target $target" >> "$state_file"
  echo "commit $instr" >> "$state_file"
  aborting=1
}

function merge-base
{
  local base="$(git merge-base "$1" "$2")"
  # There's an error in the branching history for 4.13, possibly caused by PRs
  # merged shortly after it was branched. The effect is that there are two
  # "last commit before branching 4.13" commits in the history which causes the
  # common parent dd7927 to be selected. We manually amend this to 4.13's
  # merge-base.
  if [[ $base = 'dd7927e156b7cb2f9cb73d2d54a15a9c81921392' ]]; then
    base='621753f3eec9de91495a25723de00cef33a9e35a'
  fi
  echo "$base"
}

# Return status 0 only if the commit specified by $1 is based on a branch which
# is newer than the commit specified by $2 (i.e. cherry-picking $1 onto $2 would
# be a back-port, not a revert)
function is-backport
{
  commit="$1"
  target="$2"
  # The multicore merge history (from #10831) causes issues for `git merge-base`
  # $pre_10831 is the last commit on trunk before #10831 was merged. If that
  # commit is _not_ an ancestor of $target, then we use that instead of the tip
  # of trunk to work out the merge-base, as this avoids the complicated rebase
  # and merge history in #10831.
  pre_10831='263a2a429c'
  if git merge-base --is-ancestor $pre_10831 "$target"; then
    trunk='upstream/trunk'
  else
    trunk=$pre_10831
  fi
  target_sha="$(git rev-list -n 1 "$target")"
  target_mergebase="$(merge-base "$target" $trunk)"
  mergebase="$(merge-base "$commit" "$target")"
  if [[ $mergebase = $target_sha ]]; then
    # Commit is based on target!
    return
  elif [[ $mergebase = $target_mergebase ]]; then
    # The common point between $commit and $target is $target's merge-base with
    # trunk. That means $commit is newer, as otherwise the common point would
    # be the merge-base of $commit and trunk.
    return
  fi

  # This isn't a back-port
  return 1
}

function rebase
{
  for instr in "${WORKING[@]}"; do
    if ((aborting)); then
      echo "$instr" >> "$state_file"
    else
      sha="${instr#* }"
      verb="${instr% *}"
      case $verb in
        pick|fixup)
          if ! is-backport "$sha" "$target"; then
            COMMITS+=("$instr")
            echo "Skipping $sha as it's older than $target ($(git log -n 1 --format=%s $sha))"
          else
            if [[ $verb = 'fixup' ]]; then
              echo "fixup $sha on $target ($(git log -n 1 --format=%s $sha))"
              msg="$(git rev-parse --short HEAD)"
              amend='--amend'
              next="$instr"
            else
              echo "cherry-pick $sha to $target ($(git log -n 1 --format=%s $sha))"
              msg="$sha"
              amend=''
              next='pick $head'
            fi
            git cherry-pick --no-commit "$sha" >& /dev/null
            git reset -- Changes &> /dev/null
            git checkout -- Changes &> /dev/null
            if reconfigure; then
              TO_DELETE=()
              while read -r status; do
                case ${status:0:2} in
                  DU)
                    git reset -- "${status:3}" &> /dev/null
                    TO_DELETE+=("${status:3}");;
                  UU)
                    if ! grep -q '^<<<<<' "${status:3}" ; then
                      git add -- "${status:3}"
                    else
                      git reset -- "${status:3}" &>/dev/null
                    fi;;
                esac
              done < <(git status --porcelain)

              if [[ -n $(git diff --stat) ]]; then
                abort
                git status
                echo
                echo "Please resolve changes, add to the index and re-run $0"
              else
                for file in "${TO_DELETE[@]}"; do
                  rm -f "$file"
                done
                commit "$msg" "$next" "$instr" "$amend"
              fi
            fi
          fi;;
        bootstrap)
          echo "Bootstrap $target ($sha)"
          cached="$(git reflog --format='%h %p' | grep " $(git rev-parse --short HEAD)$" | head -n 1 | cut -f1 -d' ')"
          if [[ -n $cached ]]; then
            echo "Re-using previous bootstrap computation from $cached"
            git merge --ff-only $cached &> /dev/null
            COMMITS+=("$instr")
          else
            echo "Bootstrapping..."
            if ! ./configure --disable-native-compiler --disable-ocamldoc --disable-ocamltest --disable-debugger > _log 2>&1; then
              cat _log
              rm _log
              abort
              echo "configure failed: either fix or erase $state_file"
            elif ! make -j world > _log 2>&1; then
              cat _log
              rm _log
              abort
              echo "make world failed: either fix or erase $state_file"
            elif ! make -j bootstrap > _log 2>&1; then
              cat _log
              rm _log
              abort
              echo "make bootstrap failed: either fix or erase $state_file"
            else
              rm _log
              git clean -dfX &> /dev/null
              # OCaml 4.06 and earlier
              if [[ -e boot/ocamldep ]]; then
                git add -- boot/ocamldep
              fi
              git add -- boot/ocamlc boot/ocamllex
              commit "$sha" "$instr" "$instr"
            fi
          fi;;
        *)
          echo "Internal error: unrecognised command $instr" >&2
          exit 1;;
      esac
    fi
  done
}

function reconfigure
{
  reconfigure=0
  while read -r item; do
    case $item in
      configure|configure.ac|aclocal.m4|build-aux/*)
        reconfigure=1;;
    esac
  done < <(git diff --name-only --cached)
  if ((reconfigure)); then
    echo "configure.ac has been changed - regenerating configure"
    if [[ -e tools/autogen ]]; then
      autogen=tools/autogen
    else
      autogen=./autogen
    fi
    if docker run --rm -it -v $PWD:/home/opam/ocaml -w /home/opam/ocaml autogen $autogen; then
      git add -- configure
    else
      abort
      echo "Regenerating configure failed - please fix and re-run $0"
      return 1
    fi
  fi
}

function commit
{
  if reconfigure; then
    if [[ -z "$(git status --porcelain)" ]]; then
      echo "Commit $1 skipped for $target (empty)"
      COMMITS+=("$3")
    else
      if ! git commit --reuse-message="$1" $4 &> _log; then
        cat _log
        rm _log
        abort
        echo "Commit failed - please fix and re-run $0"
        return
      fi
      rm -f _log
      git rebase --committer-date-is-author-date HEAD~1 &> /dev/null
      head="$(git rev-parse --short HEAD)"
      eval "com=\"$2\""
      COMMITS+=("$com")
    fi
  fi
}

aborting=0
for instr in "${COMMANDS[@]}"; do
  arg="${instr#* }"
  case ${instr%% *} in
    commit)
      git clean -dfX &> /dev/null
      verb="${arg% *}"
      if [[ $verb = 'fixup' ]]; then
        msg="$(git rev-parse --short HEAD)"
        next="$arg"
        amend='--amend'
      else
        msg="${arg#* }"
        next="$verb \$head"
        amend=''
      fi
      commit "$msg" "$next" "$arg" "$amend"
      rebase;;
    branch)
      if ((aborting)); then
        echo "$instr" >> "$state_file"
      else
        target_branch="relocatable-${arg%.*}"
        echo "Creating branch $target_branch"
        target="$arg"
        git checkout -B "$target_branch" "$arg" &> /dev/null
        WORKING=("${COMMITS[@]}")
        COMMITS=()
        rebase
      fi;;
    *)
      echo "Internal error: unrecognised command $instr" >&2
      exit 1;;
  esac
done
