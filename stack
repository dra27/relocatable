#!/usr/bin/env bash

state_file="$(realpath $(dirname "$0"))/.stack-state"
dir="$(dirname $0)/ocaml"

if [[ ! -d $dir ]]; then
  echo "Expect OCaml clone in $dir" >&2
  exit 1
fi

cd "$dir"

if ! git rev-parse --verify upstream/trunk &> /dev/null; then
  echo 'Could not find upstream/trunk' >&2
  exit 1
fi

COMMANDS=()

# Check the branches all exist and collect the commits to stack
for branch in "${BRANCHES[@]}"; do
  branch="${branch%%@*}"
  if ! git rev-parse --verify $branch &> /dev/null; then
    if ! git rev-parse --verify origin/$branch &> /dev/null; then
      echo "Both $branch and origin/$branch do not exist!" >&2
      exit 1
    else
      git branch --track $branch origin/$branch
    fi
  fi
done

fault=0
for root in "${TARGETS[@]}"; do
  if ! git rev-parse --verify $base_prefix$root &> /dev/null; then
    if ! git rev-parse --verify origin/$base_prefix$root &> /dev/null; then
      echo "Target $root not found" >&2
      fault=1
    else
      git branch $base_prefix$root origin/$base_prefix$root
    fi
  fi
done
if ((fault)); then
  exit 1
fi

COMMITS=()
WORKING=()
if [[ ! -e $state_file ]]; then
  if [[ -n "$(git status --porcelain)" ]]; then
    echo 'The working tree is not clean' >&2
    exit 1
  fi

  if [[ -e "$(git rev-parse --git-dir)/REBASE_HEAD" ]]; then
    echo 'A rebase appears to be in progress?' >&2
    exit 1
  elif [[ -e "$(git rev-parse --git-dir)/CHERRY_PICK_HEAD" ]]; then
    echo 'A cherry-pick appears to be in progress' >&2
    exit 1
  elif [[ -e "$(git rev-parse --git-dir)/MERGE_HEAD" ]]; then
    echo 'A merge appears to be in progress' >&2
    exit 1
  fi

  git clean -dfX &> /dev/null

  # Calculate the menu. First, determine the initial commit list from the
  # branches.
  for entry in "${BRANCHES[@]}"; do
    upstream="${entry#*@}"
    if [[ $upstream = $entry ]]; then
      upstream='trunk'
    fi
    branch="${entry%%@*}"
    if [[ $upstream =~ ^fixup(~[0-9])?$ ]]; then
      count="${upstream#fixup~}"
      if [[ $count = $upstream ]]; then
        count=0
      fi
      commit="$(git log --format=%h -n 1 "$branch")"
      COMMITS+=("adjust $count $entry $commit")
    elif [[ $upstream =~ @fixup$ ]]; then
      upstream="${upstream%@fixup}"
      cmd="$branch"
      count=-1
      while read -r entry; do
        commit="${entry%% *}"
        if [[ $count -eq -1 && ${entry#* } = 'Basis' ]]; then
          continue
        fi
        cmd="$cmd $commit"
        ((count++))
      done < <(git log upstream/$upstream..$branch --format="%h %s" --reverse)
      COMMITS+=("adjust $count $cmd")
    else
      while read -r entry; do
        commit="${entry%% *}"
        bootstrap=0
        diffs=0
        while read -r path; do
          case "$path" in
            boot/ocaml*) bootstrap=1;;
            *) diffs=1;;
          esac
        done < <(git diff-tree --no-commit-id --name-only -r "$commit")
        if [[ $bootstrap -eq 1 ]]; then
          if [[ $diffs -eq 0 ]]; then
            COMMITS+=("bootstrap $commit")
          else
            COMMITS+=("coreboot $commit")
          fi
        else
          COMMITS+=("pick $commit")
        fi
      done < <(git log upstream/$upstream..$branch --format="%h %s" --reverse)
    fi
  done

  # Now generate commands for each target branch
  for root in "${TARGETS[@]}"; do
    COMMANDS+=("branch $base_prefix$root")
  done
else
  if [[ -n "$(git ls-files --exclude-standard --others)" ]]; then
    echo 'Untracked files in the working directory' >&2
    exit 1
  elif [[ -n "$(git diff --stat)" ]]; then
    echo 'Unstaged changes in the working directory' >&2
    exit 1
  fi

  # Load the stack state
  phase=0
  while read -r line; do
    case ${line%% *} in
      pick|bootstrap|coreboot|fixup|adjust|next)
        if ((phase)); then
          WORKING+=("$line")
        else
          COMMITS+=("$line")
        fi;;
      commit)
        COMMANDS+=("$line")
        phase=1;;
      branch)
        COMMANDS+=("$line");;
      target)
        target="${line#* }";;
      *)
        echo "Unrecognised command: $line" >&2
        phase=2;;
    esac
  done < <(cat "$state_file")
  if [[ $phase -gt 1 ]]; then
    exit 1
  fi
  rm "$state_file"
fi

function abort
{
  echo "Branch: $branch for $target"
  echo "  $action"
  for commit in "${COMMITS[@]}"; do
    echo "$commit"
  done > "$state_file"
  echo "target $target" >> "$state_file"
  echo "commit $instr" >> "$state_file"
  aborting=1
}

function merge-base
{
  local base="$(git merge-base "$1" "$2")"
  # There's an error in the branching history for 4.13, possibly caused by PRs
  # merged shortly after it was branched. The effect is that there are two
  # "last commit before branching 4.13" commits in the history which causes the
  # common parent dd7927 to be selected. We manually amend this to 4.13's
  # merge-base.
  if [[ $base = 'dd7927e156b7cb2f9cb73d2d54a15a9c81921392' ]]; then
    base='621753f3eec9de91495a25723de00cef33a9e35a'
  fi
  echo "$base"
}

# Return status 0 only if the commit specified by $1 is based on a branch which
# is newer than the commit specified by $2 (i.e. cherry-picking $1 onto $2 would
# be a back-port, not a revert)
function is-backport
{
  commit="$1"
  target="$2"
  # The multicore merge history (from #10831) causes issues for `git merge-base`
  # $pre_10831 is the last commit on trunk before #10831 was merged. If that
  # commit is _not_ an ancestor of $target, then we use that instead of the tip
  # of trunk to work out the merge-base, as this avoids the complicated rebase
  # and merge history in #10831.
  pre_10831='263a2a429c'
  if git merge-base --is-ancestor $pre_10831 "$target"; then
    trunk='upstream/trunk'
  else
    trunk=$pre_10831
  fi
  target_sha="$(git rev-list -n 1 "$target")"
  target_mergebase="$(merge-base "$target" $trunk)"
  mergebase="$(merge-base "$commit" "$target")"
  if [[ $mergebase = $target_sha ]]; then
    # Commit is based on target!
    return
  elif [[ $mergebase = $target_mergebase ]]; then
    # The common point between $commit and $target is $target's merge-base with
    # trunk. That means $commit is newer, as otherwise the common point would
    # be the merge-base of $commit and trunk.
    return
  fi

  # This isn't a back-port
  return 1
}

function rebase
{
  while [[ ${#WORKING[@]} -gt 0 ]]; do
    instr="${WORKING[0]}"
    WORKING=("${WORKING[@]:1}")
    sha="${instr#* }"
    verb="${instr%% *}"
    case $verb in
      next)
        COMMITS+=("$sha");;
      pick|fixup)
        if [[ $verb = 'fixup' ]]; then
          echo "fixup $sha on $target ($(git log -n 1 --format=%s $sha))"
          msg="$(git rev-parse --short HEAD)"
          amend='--amend'
          next=''
        else
          echo "cherry-pick $sha to $target ($(git log -n 1 --format=%s $sha))"
          msg="$sha"
          amend=''
          next='pick $head'
        fi
        if cherry-pick "$sha"; then
          commit "$msg" "$next" "$instr" "$amend"
        fi;;
      bootstrap)
        echo "Bootstrap $target ($sha) on $(git rev-parse --short HEAD)"
        cached="$(git reflog --format='%h %p' | grep " $(git rev-parse --short HEAD)$" | head -n 1 | cut -f1 -d' ')"
        if [[ -n $cached ]] && git diff-tree --no-commit-id --name-only -r "$cached" | grep -Fq 'boot/ocaml'; then
          echo "Re-using previous bootstrap computation from $cached"
          git merge --ff-only $cached &> /dev/null
          COMMITS+=("bootstrap $cached")
        else
          BOOTSTRAPS+=("Bootstrap $target ($sha) on $(git rev-parse --short HEAD)")
          echo "Bootstrapping..."
          if ! ./configure --disable-native-compiler --disable-ocamldoc --disable-ocamltest --disable-debugger > _log 2>&1; then
            cat _log
            rm _log
            abort
            echo "configure failed: either fix or erase $state_file"
          elif ! make -j coldstart > _log 2>&1; then
            cat _log
            rm _log
            abort
            echo "make coldstart failed: either fix or erase $state_file"
            echo 'Do _not_ bootstrap'
          elif ! make -j coreall > _log 2>&1; then
            cat _log
            rm _log
            abort
            echo "make coreall failed: either fix or erase $state_file"
            echo 'Do _not_ bootstrap'
          elif ! make -j bootstrap > _log 2>&1; then
            cat _log
            rm _log
            abort
            git reset -- boot/ocaml* &> /dev/null
            git checkout -- boot/ocaml* &> /dev/null
            echo "make bootstrap failed: either fix or erase $state_file"
            echo 'Do _not_ bootstrap'
          else
            rm _log
            git clean -dfX &> /dev/null
            # OCaml 4.06 and earlier
            if [[ -e boot/ocamldep ]]; then
              git add -- boot/ocamldep
            fi
            git add -- boot/ocamlc boot/ocamllex
            commit "$sha" 'bootstrap $head' "$instr"
          fi
        fi;;
      coreboot)
        coreboot="Coreboot $target ($sha) on $(git rev-parse --short HEAD)"
        echo "$coreboot"
        if cherry-pick "$sha" 'boot/ocaml*' 'Do _not_ bootstrap'; then
          next="${WORKING[0]}"
          if [[ ${next%% *} = 'fixup' ]]; then
            echo "Skipping coreboot - next command is a fixup"
            if ! git commit --reuse-message="$sha" &> _log; then
              cat _log
              rm _log
              abort
              echo "Commit failed - please fix and re-run $0"
              echo 'Do _not_ bootstrap'
            else
              rm _log
              git rebase --committer-date-is-author-date HEAD~1 &> /dev/null
              COMMITS+=("coreboot $(git rev-parse --short HEAD)")
            fi
          else
            coreboot "$sha"
          fi
        fi;;
      *)
        echo "Internal error: unrecognised command $instr" >&2
        exit 1;;
    esac
    if ((aborting)); then
      for instr in "${WORKING[@]}"; do
        echo "$instr" >> "$state_file"
      done
      WORKING=()
    fi
  done
}

function reconfigure
{
  reconfigure=0
  while read -r item; do
    case $item in
      configure|configure.ac|aclocal.m4|build-aux/*)
        reconfigure=1;;
    esac
  done < <(git diff --name-only --cached)
  if ((reconfigure)); then
    echo "configure.ac has been changed - regenerating configure"
    if [[ -e tools/autogen ]]; then
      autogen=tools/autogen
    else
      autogen=./autogen
    fi
    rm -f configure
    if [[ $(sed -ne 's/^AC_PREREQ(\[\(.*\)\])$/\1/p' configure.ac) =~ ^(2.69)?$ ]]; then
      autogen="$autogen autoconf2.69"
    fi
    if $autogen; then
      git add -- configure
    else
      abort
      echo "Regenerating configure failed - please fix and re-run $0"
      return 1
    fi
  fi
}

function cherry-pick
{
  git cherry-pick --no-commit "$1" >& /dev/null
  git reset -- Changes $2 &> /dev/null
  git checkout -- Changes $2 &> /dev/null
  if reconfigure; then
    while read -r status; do
      case ${status:0:2} in
        DU)
          git reset -- "${status:3}" &> /dev/null
          TO_DELETE+=("${status:3}");;
        UU|AA)
          if ! grep -q '^<<<<<' "${status:3}" ; then
            git add -- "${status:3}"
          else
            git reset -- "${status:3}" &>/dev/null
          fi;;
      esac
    done < <(git status --porcelain)

    if [[ -n $(git diff --stat) ]]; then
      abort
      git status
      echo
      echo "Please resolve changes, add to the index and re-run $0"
      if [[ -n $3 ]]; then
        echo "$3"
      fi
      return 1
    else
      return 0
    fi
  else
    return 1
  fi
}

function coreboot
{
  head_sha="$(git rev-parse --short HEAD)"
  # Check the cache
  if ! git commit --reuse-message="$1" &> _log; then
    cat _log
    rm _log
    abort
    echo "Commit failed - please fix and re-run $0"
  else
    rm _log
    git rebase --committer-date-is-author-date HEAD~1 &> /dev/null
    code_sha="$(git rev-parse --short HEAD)"
    cached="$(git reflog --format='%h %p' | grep " ${code_sha}\$" | head -n 1 | cut -f1 -d' ')"
    if [[ -n $cached ]] && git diff-tree --no-commit-id --name-only -r "$cached" | grep -Fq 'boot/ocaml'; then
      # This code commit has a bootstrap parent - so we can search for a unified commit
      combined=''
      while read -r commit; do
        if git diff --quiet $cached $commit; then
          combined="$commit"
          break;
        fi
      done < <(git reflog --format='%h %p' | grep " ${head_sha}\$" | cut -f1 -d' ' | sort | uniq)
      if [[ -n $combined ]] && git diff-tree --no-commit-id --name-only -r "$combined" | grep -Fq 'boot/ocaml'; then
        echo "Re-using previous coreboot computation from $combined"
        git reset --hard $combined &> /dev/null
        COMMITS+=("coreboot $combined")
        return
      fi
    fi
    git reset --hard $head_sha &> /dev/null
    if ! ./configure --disable-native-compiler --disable-ocamldoc --disable-ocamltest --disable-debugger > _log 2>&1; then
      cat _log
      rm _log
      abort
      echo "configure failed: either fix or erase $state_file"
      return
    fi
    BOOTSTRAPS+=("$coreboot")
    echo 'Warming up...'
    if ! make -j coldstart > _log 2>&1; then
      cat _log
      rm _log
      abort
      echo "make coldstart failed: either fix or erase $state_file"
      return
    fi
    echo 'Building...'
    if ! git merge --ff-only $code_sha &> /dev/null || ! make -j coreall > _log 2>&1; then
      cat _log
      rm _log
      git reset --hard $head_sha &> /dev/null
      git cherry-pick --no-commit $code_sha &> /dev/null
      abort
      echo "make coreall failed: either fix or erase $state_file"
      echo 'Do _not_ bootstrap'
      return
    fi
    echo 'Bootstrapping...'
    if ! make -j bootstrap > _log 2>&1; then
      cat _log
      rm _log
      git reset --hard $head_sha &> /dev/null
      git cherry-pick --no-commit $code_sha &> /dev/null
      abort
      echo "make bootstrap failed: either fix or erase $state_file"
      echo 'Do _not_ bootstrap'
    else
      rm _log
      git clean -dfX &> /dev/null
      # OCaml 4.06 and earlier
      if [[ -e boot/ocamldep ]]; then
        git add -- boot/ocamldep
      fi
      git add -- boot/ocamlc boot/ocamllex
      if ! git commit -m 'Bootstrap' &> _log; then
        cat _log
        rm _log
        abort
        echo "Commit failed - please fix and re-run $0"
      else
        rm -f _log
        git rebase --committer-date-is-author-date HEAD~1 &> /dev/null
        boot_sha="$(git rev-parse --short HEAD)"
        git reset --hard HEAD~1 &> /dev/null
        git cherry-pick --no-commit $boot_sha &> /dev/null
        git commit --reuse-message="$1" --amend &> /dev/null
        git rebase --committer-date-is-author-date HEAD~1 &> /dev/null
        head="$(git rev-parse --short HEAD)"
        COMMITS+=("coreboot $head")
      fi
    fi
  fi
}

TO_DELETE=()
function commit
{
  for file in "${TO_DELETE[@]}"; do
    rm -f "$file"
  done
  TO_DELETE=()
  if [[ -z "$(git status --porcelain)" ]]; then
    echo "Commit $1 skipped for $target (empty)"
    head="$(git rev-parse --short HEAD)"
  else
    if ! git commit --reuse-message="$1" $4 &> _log; then
      cat _log
      rm _log
      abort
      echo "Commit failed - please fix and re-run $0"
      return
    fi
    rm -f _log
    git rebase --committer-date-is-author-date HEAD~1 &> /dev/null
    head="$(git rev-parse --short HEAD)"
    #echo "Committed HEAD $head"
    if [[ -n $2 ]]; then
      eval "com=\"$2\""
      COMMITS+=("$com")
    else
      previous="${COMMITS[-1]}"
      COMMITS[-1]="${previous%% *} $head"
    fi
  fi
  if [[ -z $2 ]]; then
    previous="${COMMITS[-1]}"
    if [[ ${previous%% *} = 'coreboot' ]]; then
      echo "Repeating the previous coreboot"
      # It's slightly simpler just repeat the coreboot commit rather than
      # threading this through the entire fixup logic that it needs to
      # coldstart with HEAD~1. The changes would either need stashing or
      # committing in stages, etc. which muddles the error code.
      # Throw this commit away
      git reset --hard HEAD~1 &> /dev/null
      # Remove the previous coreboot from COMMITS
      COMMITS=("${COMMITS[@]:0:$((${#COMMITS[@]} - 1))}")
      # Add this commit to be coreboot'd now
      WORKING=("coreboot $head" "${WORKING[@]}")
    fi
  fi
}

# Useful loop for identifying branches needing rebasing
#our_base="$(git rev-parse ${base_prefix}trunk)"
#our_base='d98fd806573088994b0ab60de032d7d54221488f'
#for entry in "${BRANCHES[@]}"; do
#  base="$(merge-base ${entry%%@*} upstream/trunk)"
#  if [[ $base = $our_base ]]; then
#    echo "$entry: $base"
#  fi
#done
#exit 0

BOOTSTRAP=()
aborting=0
while [[ ${#COMMANDS[@]} -gt 0 ]]; do
  instr="${COMMANDS[0]}"
  COMMANDS=("${COMMANDS[@]:1}")
  arg="${instr#* }"
  case ${instr%% *} in
    commit)
      git clean -dfX &> /dev/null
      verb="${arg% *}"
      instr="$arg"
      if [[ $verb = 'coreboot' ]]; then
        coreboot "${arg#* }"
      else
        if [[ $verb = 'fixup' ]]; then
          msg="$(git rev-parse --short HEAD)"
          next=''
          amend='--amend'
        else
          msg="${arg#* }"
          next="$verb \$head"
          amend=''
        fi
        if reconfigure; then
          commit "$msg" "$next" "$arg" "$amend"
          if ((!aborting)); then
            rebase
          fi
        fi
      fi;;
    branch)
      target_branch="$backport_prefix${arg#$base_prefix}"
      echo "Creating branch $target_branch"
      target="$arg"
      WORKING=()
      for cmd in "${COMMITS[@]}"; do
        verb="${cmd%% *}"
        sha="${cmd#* }"
        case "$verb" in
          pick|bootstrap|coreboot)
            if ! is-backport "$sha" "$target"; then
              echo "Skipping $sha as it's older than $target ($(git log -n 1 --format=%s $sha))"
              WORKING+=("next $cmd")
            else
              WORKING+=("$cmd")
            fi;;
          adjust)
            # INSTR[0] = adjust; INSTR[1] = count; INSTR[2] = description; INSTR[@]:3 = commits
            INSTR=($cmd)
            if ! is-backport "${INSTR[3]}" "$target"; then
              WORKING+=("next $cmd")
              echo "Skipping ${INSTR[2]} as it's older than $target"
            else
              count="${INSTR[1]}"
              if [[ $count -eq 0 ]]; then
                POPPED=()
              else
                i=0
                while [[ $count -gt 0 ]]; do
                  ((i++))
                  element="${WORKING[-$i]}"
                  case "${element%% *}" in
                    fixup|next) ;;
                    *) ((count--));
                  esac
                done
                POPPED=("${WORKING[@]: -$i}")
                WORKING=("${WORKING[@]:0:$((${#WORKING[@]} - $i))}")
              fi
              INSTR=("${INSTR[@]:3}")
              while [[ ${#INSTR[@]} -gt 0 ]]; do
                sha="${INSTR[0]}"
                INSTR=("${INSTR[@]:1}")
                WORKING+=("fixup $sha")
                loop=1
                if [[ ${#POPPED[@]} -gt 0 && $loop -eq 1 ]]; then
                  elt="${POPPED[0]}"
                  WORKING+=("$elt")
                  POPPED=("${POPPED[@]:1}")
                  case "${elt%% *}" in
                    fixup|next) ;;
                    *) loop=0;;
                  esac
                fi
              done
            fi;;
          *)
            echo "Internal error: unrecognised command $cmd" >&2
            exit 1;;
          esac
      done
      COMMITS=()
      git checkout -B "$target_branch" "$arg" &> /dev/null
      rebase;;
    *)
      echo "Internal error: unrecognised command $instr" >&2
      exit 1;;
  esac
  if ((aborting)); then
    for instr in "${COMMANDS[@]}"; do
      echo "$instr" >> "$state_file"
    done
    COMMANDS=()
  fi
done

cd ..
if ((!aborting)); then
  git submodule update
fi

if [[ ${#BOOTSTRAPS[@]} -gt 0 ]]; then
  echo
  echo Bootstrap summary:
  for msg in "${BOOTSTRAPS[@]}"; do
    echo " - $msg"
  done
fi

if ((aborting)); then
  exit 2
fi
