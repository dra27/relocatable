name: Build

on: pull_request

jobs:
  no-naked-pointers:
    runs-on: ubuntu-latest
    steps:
<<<<<<<
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: compiler
      - name: Unpack Artifact
        run: |
          tar --zstd -xf sources.tar.zstd
          rm -f sources.tar.zstd
      - name: Packages
        run: |
          sudo apt-get update -y && sudo apt-get install -y texlive-latex-extra texlive-fonts-recommended hevea sass
      - name: Run the testsuite
        run: |
          MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh test
      - name: Build API Documentation
        run: |
          MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh api-docs
      - name: Install
        run: |
         MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh install
      - name: Build the manual
        run: |
          MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh manual
        if: needs.build.outputs.manual_changed == 'true'
      - name: Other checks
        run: |
          MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh other-checks

# MacOS build+testsuite run, and Linux O0 run.
  others:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: linux-O0
            os: ubuntu-latest
            config_arg: CFLAGS='-O0'
          - name: macos
            os: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: OS Dependencies
        if: runner.os == 'MacOS'
        run: brew install parallel
      - name: configure tree
        run: |
          CONFIG_ARG=${{ matrix.config_arg }} MAKE_ARG=-j XARCH=x64 bash -xe tools/ci/actions/runner.sh configure
      - name: Build
        run: |
          MAKE_ARG=-j bash -xe tools/ci/actions/runner.sh build
      - name: Run the testsuite
        if: ${{ matrix.name != 'linux-O0' }}
        run: |
          bash -c 'SHOW_TIMINGS=1 tools/ci/actions/runner.sh test'
      - name: Run the testsuite (linux-O0)
        if: ${{ matrix.name == 'linux-O0' }}
        env:
          OCAMLRUNPARAM: v=0,V=1
          USE_RUNTIME: d
        run: |
          for dir in $PARALLEL_TESTS; do \
           bash -cxe "SHOW_TIMINGS=1 tools/ci/actions/runner.sh test_prefix $dir"; \
          done

  i386:
    runs-on: ubuntu-latest
    container:
      image: i386/ubuntu:18.04
      options: --platform linux/i386 --user root
    steps:
      - name: OS Dependencies
        run: |
          apt-get update
          apt-get install -y git gcc make parallel
      - name: Checkout
        # See https://github.com/actions/checkout/issues/334
        uses: actions/checkout@v1
      - name: configure tree
        run: |
          MAKE_ARG=-j XARCH=i386 bash -xe tools/ci/actions/runner.sh configure
      - name: Build
        run: |
          MAKE_ARG=-j bash -xe tools/ci/actions/runner.sh build
      - name: Run the testsuite
        run: |
          bash -xe tools/ci/actions/runner.sh test

# "extra" testsuite runs, reusing the previously built compiler tree.
# debug: running the full testsuite with the
#        debug runtime and minor heap verification.
# debug-s4086: select testsuite run with the debug runtime and a small
#              minor heap.
  extra:
    needs: build
=======
    - name: Checkout
      uses: actions/checkout@v2
    - name: configure tree
      run: ./configure --disable-naked-pointers --disable-stdlib-manpages --disable-dependency-generation --enable-ocamltest
    - name: Build
      run: |
        make -j world.opt
    - name: Run the testsuite
      run: |
        make -C testsuite USE_RUNTIME=d all
  i386-static:
>>>>>>>
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Packages
      run: |
        sudo apt-get update -y && sudo apt-get install -y gcc-multilib gfortran-multilib
    - name: configure tree
      run: |
        XARCH=i386 CONFIG_ARG='--disable-stdlib-manpages --disable-shared --enable-cmm-invariants' bash -xe tools/ci/actions/runner.sh configure
    - name: Build
      run: |
        bash -xe tools/ci/actions/runner.sh build
    - name: Run the testsuite
      run: |
        bash -xe tools/ci/actions/runner.sh test
    - name: Install
      run: |
        bash -xe tools/ci/actions/runner.sh install
    - name: Other checks
      run: |
        bash -xe tools/ci/actions/runner.sh other-checks
  full-flambda:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 50
    - name: Packages
      run: |
        sudo apt-get update -y && sudo apt-get install -y texlive-latex-extra texlive-fonts-recommended hevea sass
  # Ensure that make distclean can be run from an empty tree
    - name: distclean
      run: |
        MAKE_ARG=-j make distclean
    - name: configure tree
      run: |
        MAKE_ARG=-j XARCH=x64 CONFIG_ARG='--enable-flambda --enable-cmm-invariants --enable-dependency-generation --enable-native-toplevel' OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh configure
    - name: Build
      run: |
        MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh build
    - name: Run the testsuite
      run: |
        MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh test
    - name: Build API Documentation
      run: |
        MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh api-docs
    - name: Install
      run: |
        MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh install
    - name: Check for manual changes
      id: manual
      run: >-
        tools/ci/actions/check-manual-modified.sh
        '${{ github.ref }}'
        '${{ github.event_name }}'
        '${{ github.event.pull_request.base.ref }}'
        '${{ github.event.pull_request.base.sha }}'
        '${{ github.event.pull_request.head.ref }}'
        '${{ github.event.pull_request.head.sha }}'
        '${{ github.event.ref }}'
        '${{ github.event.before }}'
        '${{ github.event.ref }}'
        '${{ github.event.after }}'
        '${{ github.event.repository.full_name }}'
    - name: Build the manual
      run: |
        MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh manual
      # Temporarily disabled 23-Apr-2021 while Dune isn't building
      if: steps.manual.outputs.changed == 'disabled'
    - name: Other checks
      run: |
        MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh other-checks
