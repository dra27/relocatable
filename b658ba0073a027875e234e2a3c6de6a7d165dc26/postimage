#**************************************************************************
#*                                                                        *
#*                                 OCaml                                  *
#*                                                                        *
#*            Gabriel Scherer, projet Parsifal, INRIA Saclay              *
#*                                                                        *
#*   Copyright 2018 Institut National de Recherche en Informatique et     *
#*     en Automatique.                                                    *
#*                                                                        *
#*   All rights reserved.  This file is distributed under the terms of    *
#*   the GNU Lesser General Public License version 2.1, with the          *
#*   special exception on linking described in the file LICENSE.          *
#*                                                                        *
#**************************************************************************

# This makefile contains common definitions shared by other Makefiles
# We assume that Makefile.config has already been included

INSTALL ?= @INSTALL@
INSTALL_DATA ?= $(INSTALL) -m u=rw,g=rw,o=r
INSTALL_PROG ?= $(INSTALL) -m u=rwx,g=rwx,o=rx

# The location of the FlexDLL sources to use (usually provided as the flexdll
# Git submodule)
FLEXDLL_SOURCES=@flexdir@

# note: these are defined by lazy expansions
# as some parts of the makefiles change BINDIR, etc.
# and expect INSTALL_BINDIR, etc. to stay in synch
# (see `shellquote` in tools/Makefile)
INSTALL_BINDIR = $(DESTDIR)$(BINDIR)
INSTALL_LIBDIR = $(DESTDIR)$(LIBDIR)
INSTALL_STUBLIBDIR = $(DESTDIR)$(STUBLIBDIR)
INSTALL_MANDIR = $(DESTDIR)$(MANDIR)

# Commandline for creating symlinks
LN = @ln@

# This is munged into utils/config.ml, not overridable by other parts of
# the build system.
OC_DLL_LDFLAGS=@oc_dll_ldflags@

BOOT_OCAMLC = $(CAMLRUN) $(ROOTDIR)/boot/ocamlc

FLEXDLL_SUBMODULE_PRESENT := $(wildcard $(ROOTDIR)/flexdll/Makefile)

ifeq "$(BOOTSTRAPPING_FLEXDLL)" "false"
  FLEXLINK_ENV =
  CAMLOPT_CMD = $(CAMLOPT)
  OCAMLOPT_CMD = $(OCAMLOPT)
  MKLIB_CMD = $(MKLIB)
  ocamlc_cmd = $(ocamlc)
  ocamlopt_cmd = $(ocamlopt)
else
ifeq "$(wildcard $(ROOTDIR)/flexlink.opt$(EXE))" ""
  FLEXLINK_ENV = \
    OCAML_FLEXLINK="$(ROOTDIR)/boot/ocamlrun$(EXE) \
                    $(ROOTDIR)/boot/flexlink.byte$(EXE)"
else
  FLEXLINK_ENV = \
    OCAML_FLEXLINK="$(ROOTDIR)/flexlink.opt$(EXE) -I $(ROOTDIR)/stdlib/flexdll"
endif # ifeq "$(wildcard $(ROOTDIR)/flexlink.opt$(EXE))" ""
  CAMLOPT_CMD = $(FLEXLINK_ENV) $(CAMLOPT)
  OCAMLOPT_CMD = $(FLEXLINK_ENV) $(OCAMLOPT)
  MKLIB_CMD = $(FLEXLINK_ENV) $(MKLIB)
  ocamlc_cmd = $(FLEXLINK_ENV) $(ocamlc)
  ocamlopt_cmd = $(FLEXLINK_ENV) $(ocamlopt)
endif # ifeq "$(BOOTSTRAPPING_FLEXDLL)" "false"

# Escape special characters in the argument string.
# There are four characters that need escaping:
# - backslash and ampersand, which are special in the replacement text
#   of sed's "s" command
# - exclamation mark, which is the delimiter we use for sed's "s" command
# - single quote, which interferes with shell quoting.  We are inside
#   single quotes already, so the proper escape is '\''
#   (close single quotation, insert single quote character,
#    reopen single quotation).
SED_ESCAPE=$(subst ','\'',$(subst !,\!,$(subst &,\&,$(subst \,\\,$1))))

# Escape special characters in an OCaml string literal "..."
# There are two: backslash and double quote.
OCAML_ESCAPE=$(subst ",\",$(subst \,\\,$1))

# SUBST generates the sed substitution for the variable *named* in $1
SUBST=-e 's!%%$1%%!$(call SED_ESCAPE,$($1))!'

# SUBST_STRING does the same, for a variable that occurs between "..."
# in config.mlp.  Thus, backslashes and double quotes must be escaped.
SUBST_STRING=-e 's!%%$1%%!$(call SED_ESCAPE,$(call OCAML_ESCAPE,$($1)))!'

ifeq "$(UNIX_OR_WIN32)" "win32"
# Ensure that no command can create Cygwin symbolic links by ensuring that
# symlink(2) will fail if native NTFS symlinks aren't available.
export CYGWIN := $(strip \
  $(filter-out winsymlinks winsymlinks:%, $(CYGWIN)) winsymlinks:nativestrict)
export MSYS := $(strip \
  $(filter-out winsymlinks winsymlinks:%, $(MSYS)) winsymlinks:nativestrict)
endif
